library(car)
data(prestige)
data(Prestige)
attach(Prestige)

par(mfrow=c(2,2))
plot(income, prestige, xlab="Average Income", ylab="Prestige", 
    type='n', main="(a)")
ord <- order(income)
inc <- income[ord]
pre <- prestige[ord]
x0 <- inc[80]
diffs <- abs(inc - x0)
which.diff <- sort(diffs)[50]
abline(v=c(x0-which.diff, x0+which.diff), lty=2)
abline(v=x0)
points(inc[diffs > which.diff], pre[diffs > which.diff], pch=16, col=gray(.75))
points(inc[diffs <= which.diff], pre[diffs <= which.diff])
x.n <- inc[diffs <= which.diff]
y.n <- pre[diffs <= which.diff]

plot(range(income), c(0,1), xlab="Average Income", ylab="Tricube Weight", 
    type='n', main="(b)")
abline(v=c(x0-which.diff, x0+which.diff), lty=2)
abline(v=x0)
xwts <- seq(x0-which.diff, x0+which.diff, len=250)
lines(xwts, tricube((xwts-x0)/which.diff), lty=1, lwd=2)
points(x.n, tricube((x.n - x0)/which.diff))

plot(income, prestige, xlab="Average Income", ylab="Prestige", 
    type='n', main="(c)")
abline(v=c(x0-which.diff, x0+which.diff), lty=2)
abline(v=x0)
points(x.n, y.n)
mod <- lm(y.n ~ x.n, weights=tricube((x.n-x0)/which.diff))
reg.line(mod, lwd=2, col=1)
points(x0, predict(mod, data.frame(x.n=x0)), pch=16, cex=1.8)

plot(income, prestige, xlab="Average Income", ylab="Prestige", 
    main="(d)")
lines(lowess(income, prestige, f=0.5, iter=0), lwd=2)
plot(income, prestige)
par(mfrow=c(1,1))
plot(income, prestige)
?car
quit()
n
library(RcppEigen)
t <- 'return wrap(Eigen::MatrixXd::Random(n,n));'
library(inline)
cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
t <- 'return wrap(MatrixXd::Random(n,n));'
f <- cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
t <- 'return wrap(Eigen::MatrixXd::Random(n,n););'
f <- cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
t <- 'using Eigen::MatrixXd; MatrixXd w = MatrixXd::Zero(n,n); w.setRandom(); wrap(w);'
f <- cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
t <- 'using Eigen::MatrixXd; MatrixXd m = MatrixXd::Random(3,3); return wrap(m);'
f <- cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
f(10)
as.vector(f(1e4))
as.vector(f(1))
t <- 'using Eigen::MatrixXd; const int n; MatrixXd m = MatrixXd::Random(n,n); return wrap(m);'
f <- cxxfunction(signature(n = 'integer'), t, plugin = 'RcppEigen')
f <- cxxfunction(signature(n = 'int'), t, plugin = 'RcppEigen')
t <- 'using Eigen::MatrixXd; const int N(n); MatrixXd m = MatrixXd::Random(N,N); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin = 'RcppEigen')
t <- 'using Eigen::MatrixXd; const int N(as<int>(n)); MatrixXd m = MatrixXd::Random(N,N); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin = 'RcppEigen')
f(10)
f(1)
hist(f(1e4))
hist(as.vector(f(1e4)))
hist(abs (as.vector(f(1e3))))
t <- 'using Eigen::VectorXd; const int N(as<int>(n));  VectorXd m = VectorXd::Random(N,N); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin = 'RcppEigen')
hist(f(1e3))
library(RcppEigen)
library(inline)
t <- 'using Eigen:VectorXd; const int N(as<int>(n)); VectorXd m = VectorXd::Random(n); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
t <- 'using Eigen::VectorXd; const int N(as<int>(n)); VectorXd m = VectorXd::Random(n); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
t <- 'using Eigen::ArrayXf; const int N(as<int>(n)); ArrayXf m = ArrayXf::Random(n); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
t <- 'using Eigen::VectorXd; const int N(as<int>(n)); VectorXd m = VectorXd::Random(n); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
t <- 'using Eigen::VectorXf; const int N(as<int>(n)); VectorXf m = VectorXf::Random(n); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
t <- 'using Eigen::VectorXd; const int N(as<int>(n)); VectorXd m = VectorXd::Random(N); return wrap(m);'
f <- cxxfunction(signature(n = 'int'), t, plugin='RcppEigen')
f(1e3)
hist(f(1e4))
hist(abs(f(1e4)))
hist(runif(1e3))
hist(runif(1e4))
hist(f(1e4))
hist(abs(f(1e4)))
hist(abs(f(1e4)))
?Chol
?chol
x <- y <- 2
y <- 3
x
y
x <- y <- 2
x <- y*x
x
y
t <- foobaz(10, 2)
t <- foobaz(10, 2)
quit()
n
