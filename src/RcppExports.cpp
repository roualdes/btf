// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dexpBTF
Eigen::MatrixXd dexpBTF(const int& iter, const Eigen::Map<Eigen::VectorXd>& y, const int& k, const Eigen::MappedSparseMatrix<double>& D, const double& alpha, const double& rho);
RcppExport SEXP btf_dexpBTF(SEXP iterSEXP, SEXP ySEXP, SEXP kSEXP, SEXP DSEXP, SEXP alphaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP );
        Rcpp::traits::input_parameter< const int& >::type k(kSEXP );
        Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type D(DSEXP );
        Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP );
        Eigen::MatrixXd __result = dexpBTF(iter, y, k, D, alpha, rho);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gdPBTF
Eigen::MatrixXd gdPBTF(const int& iter, const Eigen::Map<Eigen::VectorXd>& y, const int& k, const Eigen::MappedSparseMatrix<double>& D, const double& alpha, const double& rho);
RcppExport SEXP btf_gdPBTF(SEXP iterSEXP, SEXP ySEXP, SEXP kSEXP, SEXP DSEXP, SEXP alphaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP );
        Rcpp::traits::input_parameter< const int& >::type k(kSEXP );
        Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type D(DSEXP );
        Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP );
        Eigen::MatrixXd __result = gdPBTF(iter, y, k, D, alpha, rho);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// tf_approx
typedef Eigen::VectorXd Vec; typedef Eigen::SparseMatrix<double> spMat; List tf_approx(const Vec& y, const Vec& l, const spMat& D, const int& k, const double& eps, const double& tau, const int& max_iter);
RcppExport SEXP btf_tf_approx(SEXP ySEXP, SEXP lSEXP, SEXP DSEXP, SEXP kSEXP, SEXP epsSEXP, SEXP tauSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const Vec& >::type y(ySEXP );
        Rcpp::traits::input_parameter< const Vec& >::type l(lSEXP );
        Rcpp::traits::input_parameter< const spMat& >::type D(DSEXP );
        Rcpp::traits::input_parameter< const int& >::type k(kSEXP );
        Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP );
        Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP );
        Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP );
        typedef Eigen::VectorXd Vec; typedef Eigen::SparseMatrix<double> spMat; List __result = tf_approx(y, l, D, k, eps, tau, max_iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
