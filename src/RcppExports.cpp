// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dexp
Rcpp::List dexp(const int& iter, const Eigen::Map<Eigen::VectorXd>& y, const Eigen::MappedSparseMatrix<double>& D, const double& alpha, const double& rho, const int& m, const bool& debug);
RcppExport SEXP btf_dexp(SEXP iterSEXP, SEXP ySEXP, SEXP DSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool& >::type debug(debugSEXP);
    __result = Rcpp::wrap(dexp(iter, y, D, alpha, rho, m, debug));
    return __result;
END_RCPP
}
// gdp
Rcpp::List gdp(const int& iter, const Eigen::Map<Eigen::VectorXd>& y, const Eigen::MappedSparseMatrix<double>& D, const double& alpha, const double& rho, const int& m, const bool& debug);
RcppExport SEXP btf_gdp(SEXP iterSEXP, SEXP ySEXP, SEXP DSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool& >::type debug(debugSEXP);
    __result = Rcpp::wrap(gdp(iter, y, D, alpha, rho, m, debug));
    return __result;
END_RCPP
}
// tf_approx
List tf_approx(const Eigen::Map<Eigen::VectorXd>& y, const Eigen::Map<Eigen::VectorXd>& l, const Eigen::MappedSparseMatrix<double>& D, const int& k, const double& eps, const double& tau, const int& max_iter);
RcppExport SEXP btf_tf_approx(SEXP ySEXP, SEXP lSEXP, SEXP DSEXP, SEXP kSEXP, SEXP epsSEXP, SEXP tauSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(tf_approx(y, l, D, k, eps, tau, max_iter));
    return __result;
END_RCPP
}
